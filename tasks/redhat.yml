---

# fail if it's not a Red Hat based system
- name: Check OS (common)
  fail: msg="Not a Red Hat based system!"
  when: ansible_distribution != 'CentOS' and ansible_distribution != 'Red Hat Enterprise Linux'


- name: Check OS version (common)
  fail: msg="Not a Red Hat 7 based system!"
  when: ansible_distribution_major_version != '7'


- name: Detect Google Cloud
  stat: path=/etc/yum.repos.d/google-cloud.repo
  register: google_cloud_detect


- name: Register Google Cloud
  set_fact:
    google_cloud: true
  when: google_cloud_detect.stat.exists


# Google Cloud does not use systemd
- block:

  # reject the play if systemd is not used
  - name: check if systemd is used (1)
    stat: path=/run/systemd/system
    register: systemd_exists


  - name: check if systemd is used (2)
    fail: msg="systemd is not installed"
    when: systemd_exists.stat.exists != True
  when: not google_cloud


# update package cache - required for any new software installation
- name: Update yum cache
  yum:
    name: "*"
    state: latest
    update_cache: yes


## update packages to latest version
#
#- name: upgrade all packages
#  yum: name=* state=latest update_cache=yes
#  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'


- name: Hostname
  hostname: name={{ hostname }}
  notify:
    - restart system
    - waiting for server to come back after restart
  when: not google_cloud


- name: /etc/hosts IPv4
  lineinfile: dest=/etc/hosts regexp='^{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }} }}\t' line='{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }} }}\tlocalhost localhost.localdomain localhost4 localhost4.localdomain4 {{ hostname }}' state=present
  when: not google_cloud


- name: basic packages
  yum:
    name:
      - vim-enhanced
      - nano
      - screen
      - man-db
      - psmisc
      - bind-utils
      - rsync
      - wget
      - mutt
      - lynx
      - yum-utils
      - unzip
      - pexpect
      - net-tools
      - ed
      - m4
    state: present


- name: yum-cron package
  yum:
    name:
      - yum-cron
    state: present
  notify:
    - restart yum-cron


# add some extras for the commandline
- name: /etc/profile.d/ads.sh
  template:
    src: "{{ role_path }}/templates/etc_profile.d_ads.sh"
    dest: "/etc/profile.d/ads.sh"
    owner: root
    group: root
    backup: yes
    mode: 0755


- name: does /root/.bashrc exist
  stat: path=/root/.bashrc
  register: root_bashrc


# remove HISTSIZE and HISTFILESIZE lines
- name: HISTSIZE / HISTFILESIZE in /root/.bashrc
  lineinfile:
    dest: /root/.bashrc
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  loop:
    - { regexp: '^HISTSIZE', line: '', state: absent }
    - { regexp: '^HISTFILESIZE', line: '', state: absent }
  when: root_bashrc.stat.exists == True


- name: Pre-set login username variable
  set_fact:
    login_username: ""


- name: Extract login username from environment
  set_fact:
    login_username: "{{ ansible_env.SUDO_USER }}"
  when: ansible_env.SUDO_USER is defined and ansible_env.SUDO_USER|length > 0


- name: does /home/<user>/.bashrc exist
  stat: path=/home/{{ login_username }}/.bashrc
  register: home_user_bashrc
  when: login_username|length > 0


# remove HISTSIZE and HISTFILESIZE lines
- name: HISTSIZE / HISTFILESIZE in /home/<user>/.bashrc
  lineinfile:
    dest: /home/{{ login_username }}/.bashrc
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  loop:
    - { regexp: '^HISTSIZE', line: '', state: absent }
    - { regexp: '^HISTFILESIZE', line: '', state: absent }
  when: login_username|length > 0 and home_user_bashrc.stat.exists == True


## source: https://github.com/rpm-software-management/yum-utils/blob/master/needs-restarting.py
#- name: install own version of 'needs-restarting'
#  copy: src=needs-restarting.py dest=/root/needs-restarting.py mode=0700
#  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'


# retrieve /etc/resolv.conf content
- name: /etc/resolv.conf content
  shell: cat /etc/resolv.conf
  register: resolv_conf
  changed_when: false


# replace /etc/resolv.conf if this is the standard file from Hetzner
- name: /etc/resolv.conf replacement
  copy:
    src: "{{ role_path }}/files/resolv.conf"
    dest: /etc/resolv.conf
    owner: root
    group: root
    mode: 0644
  when: resolv_conf.stdout.find('Hetzner') != -1


# update OS automatically
- name: /etc/yum/yum-cron.conf
  lineinfile:
    dest: /etc/yum/yum-cron.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
    create: yes
  loop:
    - { regexp: '^update_cmd', line: 'update_cmd = default', state: present }
    - { regexp: '^update_messages', line: 'update_messages = yes', state: present }
    - { regexp: '^download_updates', line: 'download_updates = yes', state: present }
    - { regexp: '^apply_updates', line: 'apply_updates = yes;', state: present }
  notify:
    - restart yum-cron


- name: start update service
  service:
    name: yum-cron
    enabled: yes
  notify:
    - restart yum-cron


- name: install Red Hat version of 'needs-restarting'
  get_url:
    url: https://raw.githubusercontent.com/rpm-software-management/yum-utils/master/needs-restarting.py
    dest: /root/needs-restarting.py
    mode: 0700


- name: Reboot required (Red Hat) - Step 1
  command: /root/needs-restarting.py -r
  register: reboot_required
  ignore_errors: True
  changed_when: False

- name: Reboot required (Red Hat) - Step 2
  shell: ( /bin/sleep 5 ; /sbin/shutdown -r now "Ansible updates triggered" ) &
  async: 30
  poll: 0
  ignore_errors: true
  notify:
    - waiting for server to come back after restart
  when: reboot_required.rc == 1


- meta: flush_handlers
